// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    apply from: "$rootDir/dependencies.gradle"

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'https://maven.fabric.io/public'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$gradleAndroidToolsVersion"
        classpath "com.neenbedankt.gradle.plugins:android-apt:$aptVersion"
        classpath "me.tatarka:gradle-retrolambda:$retrolambdaVersion"
        classpath "org.codehaus.groovy:groovy-android-gradle-plugin:$groovyAndroidVersion"

        /**
         * Looking for the latest Fabric version? Check here:
         * (https://fabric-artifacts.s3.amazonaws.com/public/io/fabric/tools/gradle/maven-metadata.xml)
         */
        classpath "io.fabric.tools:gradle:$fabricVersion"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

def gitSha() {
    def p = 'git rev-parse --short HEAD'.execute([], project.rootDir)
    p.waitFor()
    if (p.exitValue() != 0) {
        throw new RuntimeException(p.errorStream.text)
    }

    return p.text.trim()
}

def gitTimestamp() {
    def p = 'git log -n 1 --format=%at'.execute([], rootDir)
    p.waitFor()
    if (p.exitValue() != 0) {
        throw new RuntimeException(p.errorStream.text)
    }

    return p.text.trim()
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task wrapper(type: Wrapper) {
    description 'Creates the gradle wrapper.'
    gradleVersion '2.12'
}

task runDomainUnitTests(dependsOn: [':domain:test']) {
    description 'Run unit tests for the domain layer.'
}

task runDataUnitTests(dependsOn: [':data:test']) {
    description 'Run unit tests for the data layer.'
}

task runAppUnitTests(dependsOn: [':app:test']) {
    description 'Run unit tests for the app layer.'
}

task runUnitTests(dependsOn: ['runDomainUnitTests', 'runDataUnitTests', 'runAppUnitTests']) {
    description 'Run unit tests for both domain and data layers.'
}

task runAcceptanceTests(dependsOn: [':app:connectedAndroidTest']) {
    description 'Run application acceptance tests.'
}